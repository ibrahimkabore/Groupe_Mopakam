"""
Django settings for mopakam project.

Generated by 'django-admin startproject' using Django 5.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

######################    start date 20/02/2025 ############################
from logging import config
import os
from pathlib import Path
from django.contrib.messages import constants as messages
from django.utils.translation import gettext_lazy as _
from decouple import config

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-r-6a#&zr7v=2dxr=1(4^nlv(0$f)ne^%m7x-96y_s6w-%sv%lu"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]
AUTH_USER_MODEL = 'app_mopakam.CustomUser'
AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',  # par défaut
    'app_mopakam.auth_backends.EmailOrUsernameModelBackend',  # notre backend personnalisé
]

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    'app_mopakam',
    'safedelete',
    'django.contrib.sitemaps',
    'django.contrib.humanize',
    'django_otp',
    'django_otp.plugins.otp_static',
    'django_otp.plugins.otp_totp',
    'two_factor',
    "crispy_forms",
    'corsheaders',
    
 
]


CRISPY_TEMPLATE_PACK = 'bootstrap4'
CRISPY_CLASS_CONVERTERS = {
    'file': 'form-control-file',
}
MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    "django.middleware.security.SecurityMiddleware",
    'django.middleware.locale.LocaleMiddleware',
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    'django_otp.middleware.OTPMiddleware',
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    
]

ROOT_URLCONF = "mopakam.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            os.path.join(BASE_DIR, 'app/templates'),
            os.path.join(BASE_DIR, 'etl/templates'),
            os.path.join(BASE_DIR, 'templates'),
            ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "app_mopakam.context_processors.cart_count",
              ],
        },
    },
]

WSGI_APPLICATION = "mopakam.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME':config('DB_NAME',),
        'USER':  config('DB_USER',),
        'PASSWORD':config('DB_PASSWORD',),
        'HOST': config('DB_HOST'),  # ou l'adresse IP de votre serveur PostgreSQL
        'PORT': '5432',
    },
}



# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'fr'
LANGUAGES = [
    ('fr', _('francais')),
    ('en', _('English')),
]



LOCALE_PATHS = (
    os.path.join(BASE_DIR, 'locale'),
)
TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = '/static/'  # URL pour accéder aux fichiers statiques

# Emplacement des fichiers statiques dans le projet
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]

# Dossier où Django collectera tous les fichiers statiques lors de la mise en production
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Dossier où Django stockera les fichiers téléchargés
MEDIA_URL = 'medias/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'medias')

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


 

#configuration SMTP
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = 'ibrahim.kabore.hsg@gmail.com'  # Replace with your Gmail address
EMAIL_HOST_PASSWORD = 'hrrr tffl ggzq qtrn'

### MESSAGE D'ALERT

MESSAGE_TAGS = {
    messages.DEBUG: 'alert-secondary',
    messages.INFO: 'alert-info',
    messages.SUCCESS: 'alert-success',
    messages.WARNING: 'alert-warning',
    messages.ERROR: 'alert-danger',
}


import os

# # Paramètres CinetPay
# CINETPAY_API_KEY = os.getenv('191723936667c0d7c0d48656.82804730')
# CINETPAY_SITE_ID = os.getenv('105888863')
# CINETPAY_RETURN_URL = os.getenv('CINETPAY_RETURN_URL', 'https://votredomaine.com/payment-callback')
# CINETPAY_NOTIFY_URL = os.getenv('CINETPAY_NOTIFY_URL', 'https://votredomaine.com/payment-notification')

OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')

CSRF_COOKIE_SECURE = True
SESSION_COOKIE_SECURE = True


CSRF_TRUSTED_ORIGINS = [
    'https://5dyo2yv4847o.share.zrok.io',  # Add this line
]
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '%(levelname)s %(asctime)s %(module)s %(process)d %(thread)d %(message)s'
        },
        'simple': {
            'format': '%(levelname)s %(message)s'
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
        'file': {
            'class': 'logging.FileHandler',
            'filename': 'mopakam.log',
            'formatter': 'verbose'
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': True,
        },
        'app_mopakam': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG',
            'propagate': True,
        },
    },
}


LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '%(levelname)s %(asctime)s %(module)s %(process)d %(thread)d %(message)s'
        },
        'simple': {
            'format': '%(levelname)s %(message)s'
        },
        'json': {
            'format': '{"level": "%(levelname)s", "time": "%(asctime)s", "module": "%(module)s", "message": "%(message)s"}'
        }
    },
    'handlers': {
        'file': {
            'class': 'logging.FileHandler',
            'filename': 'crud_operations.log',
            'formatter': 'verbose',
        },
        'error_file': {
            'class': 'logging.FileHandler',
            'filename': 'error_operations.log',
            'formatter': 'verbose',
            'level': 'ERROR',  # Enregistre uniquement les erreurs
        },
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
        'json_file': {
            'class': 'logging.FileHandler',
            'filename': 'json_logs.log',
            'formatter': 'json',
            'level': 'INFO',  # Par exemple, enregistrer les informations de type 'INFO' dans un format JSON
        },
    },
    'loggers': {
        'django.db.backends': {
            'handlers': ['file', 'console'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'app_mopakam': {
            'handlers': ['file', 'error_file'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'django.request': {
            'handlers': ['error_file', 'console'],
            'level': 'ERROR',
            'propagate': False,
        },
        'myapp.custom_logger': {
            'handlers': ['json_file'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}

